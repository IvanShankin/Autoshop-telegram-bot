from types import SimpleNamespace

import pytest


@pytest.mark.asyncio
async def test_send_message_with_valid_file_id(patch_fake_aiogram, replacement_fake_bot, create_ui_image, monkeypatch):
    """‚úÖ –í–∞–ª–∏–¥–Ω—ã–π file_id: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"""
    from src.bot_actions.actions import send_message
    fake_bot = replacement_fake_bot
    ui_image, _ = await create_ui_image(key="welcome", file_id='existing_file_id')

    await send_message(chat_id=123, message="Hello!", image_key="welcome")

    assert len(fake_bot.sent) == 1
    chat_id, caption, photo, kwargs = fake_bot.sent[0]
    assert caption == "Hello!"
    assert photo == "existing_file_id"
    assert chat_id == 123



@pytest.mark.asyncio
async def test_send_message_with_invalid_file_id(
    patch_fake_aiogram, replacement_fake_bot, create_ui_image, monkeypatch, tmp_path
):
    """‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π file_id ‚Äî fallback –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞"""
    from src.bot_actions.actions import send_message
    fake_bot = replacement_fake_bot

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–º–µ–Ω—É MEDIA_DIR, —á—Ç–æ–±—ã send_message –æ—Ç–∫—Ä—ã–ª —Ñ–∞–π–ª –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—É—Ç–∏
    media_dir = tmp_path / "media"
    ui_sections = media_dir / "ui_sections"
    ui_sections.mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞—ë–º ui_image –∏ —Å–∞–º —Ñ–∞–π–ª
    ui_image, file_abs = await create_ui_image(key="error_case", file_id="bad_file_id")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Ç—É–¥–∞, –≥–¥–µ send_message –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç
    target_path = media_dir / ui_image.file_path
    target_path.parent.mkdir(parents=True, exist_ok=True)
    target_path.write_bytes(b"fake-image-bytes")

    # --- –ú–æ–∫–∞–µ–º bot.send_photo ---
    async def fake_send_photo(chat_id, photo, caption="", **kwargs):
        if photo == "bad_file_id":
            raise Exception("Bad Request: file not found")
        fake_bot.sent.append((chat_id, caption, photo, kwargs))
        # –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º file_id
        return SimpleNamespace(photo=[SimpleNamespace(file_id="new_file_id_123")])

    fake_bot.send_photo = fake_send_photo

    # –ú–æ–∫–∞–µ–º update_ui_image, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ file_id –æ–±–Ω–æ–≤–∏–ª—Å—è
    updated = {}

    async def fake_update_ui_image(**kwargs):
        updated.update(kwargs)

    monkeypatch.setattr("src.bot_actions.actions.update_ui_image", fake_update_ui_image)

    # --- –ó–∞–ø—É—Å–∫ ---
    await send_message(chat_id=321, message="Reupload test", image_key="error_case")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ ---
    assert len(fake_bot.sent) == 1, "–û–∂–∏–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ fallback"
    chat_id, caption, photo, kwargs = fake_bot.sent[0]
    assert caption == "Reupload test"
    assert isinstance(photo, (str, bytes)) or hasattr(photo, "read"), "photo –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ id"
    assert "new_file_id" in updated["file_id"]
    assert chat_id == 321



@pytest.mark.asyncio
async def test_send_message_with_show_false(
    patch_fake_aiogram, replacement_fake_bot, create_ui_image
):
    """üö´ show=False ‚Äî —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
    from src.bot_actions.actions import send_message

    fake_bot = replacement_fake_bot
    ui_image, _ = await create_ui_image(key="hidden_img", show=False, file_id="file123")

    await send_message(chat_id=777, message="Hidden image", image_key="hidden_img")

    assert len(fake_bot.sent) == 1
    chat_id, text, kwargs = fake_bot.sent[0]
    assert text == "Hidden image"
    assert chat_id == 777


@pytest.mark.asyncio
async def test_send_message_no_image_found(
    patch_fake_aiogram, replacement_fake_bot, monkeypatch
):
    """üì≠ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    from src.bot_actions.actions import send_message

    fake_bot = replacement_fake_bot

    async def fake_get_ui_image(key: str):
        return None

    monkeypatch.setattr("src.bot_actions.actions.get_ui_image", fake_get_ui_image)

    await send_message(chat_id=555, message="Plain text", image_key="missing")

    assert len(fake_bot.sent) == 1
    chat_id, text, kwargs = fake_bot.sent[0]
    assert text == "Plain text"
    assert chat_id == 555


@pytest.mark.asyncio
async def test_send_message_without_image_key(
    patch_fake_aiogram, replacement_fake_bot
):
    """üí¨ –ë–µ–∑ image_key ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    from src.bot_actions.actions import send_message

    fake_bot = replacement_fake_bot

    await send_message(chat_id=999, message="Simple text")

    assert len(fake_bot.sent) == 1
    chat_id, text, kwargs = fake_bot.sent[0]
    assert text == "Simple text"
    assert chat_id == 999

