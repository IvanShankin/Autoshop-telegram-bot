from types import SimpleNamespace
import pytest

from helpers.fake_aiogram.fake_aiogram_module import FakeTelegramBadRequest, SpySend


class TestSendMessage:

    @pytest.mark.asyncio
    async def test_send_message_with_valid_file_id(self, patch_fake_aiogram, replacement_fake_bot, create_ui_image, monkeypatch):
        """‚úÖ –í–∞–ª–∏–¥–Ω—ã–π file_id: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"""
        from src.bot_actions.actions import send_message
        fake_bot = replacement_fake_bot
        ui_image, _ = await create_ui_image(key="welcome", file_id='existing_file_id')

        await send_message(chat_id=123, message="Hello!", image_key="welcome")

        assert len(fake_bot.sent) == 1
        chat_id, caption, photo, kwargs = fake_bot.sent[0]
        assert caption == "Hello!"
        assert photo == "existing_file_id"
        assert chat_id == 123



    @pytest.mark.asyncio
    async def test_send_message_with_invalid_file_id(
        self, patch_fake_aiogram, replacement_fake_bot, create_ui_image, monkeypatch, tmp_path
    ):
        """‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π file_id ‚Äî fallback –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞"""
        from src.bot_actions.actions import send_message
        fake_bot = replacement_fake_bot

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–º–µ–Ω—É MEDIA_DIR, —á—Ç–æ–±—ã send_message –æ—Ç–∫—Ä—ã–ª —Ñ–∞–π–ª –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—É—Ç–∏
        media_dir = tmp_path / "media"
        ui_sections = media_dir / "ui_sections"
        ui_sections.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞—ë–º ui_image –∏ —Å–∞–º —Ñ–∞–π–ª
        ui_image, file_abs = await create_ui_image(key="error_case", file_id="bad_file_id")

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Ç—É–¥–∞, –≥–¥–µ send_message –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç
        target_path = media_dir / ui_image.file_path
        target_path.parent.mkdir(parents=True, exist_ok=True)
        target_path.write_bytes(b"fake-image-bytes")

        # --- –ú–æ–∫–∞–µ–º bot.send_photo ---
        async def fake_send_photo(chat_id, photo, caption="", **kwargs):
            if photo == "bad_file_id":
                raise Exception("Bad Request: file not found")
            fake_bot.sent.append((chat_id, caption, photo, kwargs))
            # –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º file_id
            return SimpleNamespace(photo=[SimpleNamespace(file_id="new_file_id_123")])

        fake_bot.send_photo = fake_send_photo

        # –ú–æ–∫–∞–µ–º update_ui_image, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ file_id –æ–±–Ω–æ–≤–∏–ª—Å—è
        updated = {}

        async def fake_update_ui_image(**kwargs):
            updated.update(kwargs)

        monkeypatch.setattr("src.bot_actions.actions.update_ui_image", fake_update_ui_image)

        # --- –ó–∞–ø—É—Å–∫ ---
        await send_message(chat_id=321, message="Reupload test", image_key="error_case")

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ ---
        assert len(fake_bot.sent) == 1, "–û–∂–∏–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ fallback"
        chat_id, caption, photo, kwargs = fake_bot.sent[0]
        assert caption == "Reupload test"
        assert isinstance(photo, (str, bytes)) or hasattr(photo, "read"), "photo –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ id"
        assert "new_file_id" in updated["file_id"]
        assert chat_id == 321



    @pytest.mark.asyncio
    async def test_send_message_with_show_false(
        self, patch_fake_aiogram, replacement_fake_bot, create_ui_image
    ):
        """üö´ show=False ‚Äî —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
        from src.bot_actions.actions import send_message

        fake_bot = replacement_fake_bot
        ui_image, _ = await create_ui_image(key="hidden_img", show=False, file_id="file123")

        await send_message(chat_id=777, message="Hidden image", image_key="hidden_img")

        assert len(fake_bot.sent) == 1
        chat_id, text, kwargs = fake_bot.sent[0]
        assert text == "Hidden image"
        assert chat_id == 777


    @pytest.mark.asyncio
    async def test_send_message_no_image_found(
        self, patch_fake_aiogram, replacement_fake_bot, monkeypatch
    ):
        """üì≠ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        from src.bot_actions.actions import send_message

        fake_bot = replacement_fake_bot

        async def fake_get_ui_image(key: str):
            return None

        monkeypatch.setattr("src.bot_actions.actions.get_ui_image", fake_get_ui_image)

        await send_message(chat_id=555, message="Plain text", image_key="missing")

        assert len(fake_bot.sent) == 1
        chat_id, text, kwargs = fake_bot.sent[0]
        assert text == "Plain text"
        assert chat_id == 555


    @pytest.mark.asyncio
    async def test_send_message_without_image_key(
        self, patch_fake_aiogram, replacement_fake_bot
    ):
        """üí¨ –ë–µ–∑ image_key ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        from src.bot_actions.actions import send_message

        fake_bot = replacement_fake_bot

        await send_message(chat_id=999, message="Simple text")

        assert len(fake_bot.sent) == 1
        chat_id, text, kwargs = fake_bot.sent[0]
        assert text == "Simple text"
        assert chat_id == 999


class TestEditMessage:
    @pytest.mark.asyncio
    async def test_edit_media_by_file_id_success(self, patch_fake_aiogram, replacement_fake_bot,  monkeypatch, create_ui_image):
        """
        –ï—Å–ª–∏ ui_image.file_id –µ—Å—Ç—å –∏ bot.edit_message_media –ø–æ file_id –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ,
        —Ç–æ edit_message –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∏ –ù–ï –≤—ã–∑—ã–≤–∞—Ç—å send_message.
        """
        from src.bot_actions import actions as bot_actions

        ui_image, _ = await create_ui_image(key="test_key", show=True, file_id="existing_file_id")
        bot = replacement_fake_bot
        spy_send = SpySend()

        monkeypatch.setattr(bot_actions, "send_message", spy_send)

        # –í—ã–∑–æ–≤
        await bot_actions.edit_message(
            chat_id=42,
            message_id=100,
            message="New caption",
            image_key="test_key",
            reply_markup=None
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∏: edit_message_media –≤—ã–∑–≤–∞–Ω, send_message –Ω–µ –≤—ã–∑–≤–∞–Ω
        assert any(c[0] == "edit_message_media" for c in bot.calls)
        assert spy_send.calls == []


    @pytest.mark.asyncio
    async def test_file_id_invalid_then_upload_succeeds_and_update_ui_image(
            self, patch_fake_aiogram, replacement_fake_bot, monkeypatch, create_ui_image
    ):
        """
        –ï—Å–ª–∏ file_id –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (TelegramBadRequest —Å —Ç–µ–∫—Å—Ç–æ–º file not found),
        —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –±—É–¥–µ—Ç –ø–æ–ø—ã—Ç–∫–∞ _try_edit_media_by_file_id (—É–ø–∞–¥—ë—Ç), –∑–∞—Ç–µ–º upload (—É—Å–ø–µ—Ö),
        –∏ update_ui_image –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —Å –Ω–æ–≤—ã–º file_id.
        """
        from src.bot_actions import actions as bot_actions
        ui_image, _ = await create_ui_image(key="upl_key", show=True, file_id="invalid_file_id")

        bot = replacement_fake_bot
        # –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ edit_message_media –±—Ä–æ—Å–∞–µ—Ç TelegramBadRequest, –≤—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç msg —Å photo
        call_count = {"n": 0}

        async def edit_media_behavior(chat_id, message_id, media, reply_markup=None):
            call_count["n"] += 1
            if call_count["n"] == 1:
                raise FakeTelegramBadRequest("file not found on telegram servers")
            return SimpleNamespace(photo=[SimpleNamespace(file_id="fresh_file_id")])

        bot.edit_media_behavior = edit_media_behavior

        updated = {}
        async def fake_update_ui_image(key, show, file_id):
            updated['args'] = (key, show, file_id)
            return None

        spy_send = SpySend()

        monkeypatch.setattr(bot_actions, "update_ui_image", fake_update_ui_image)
        monkeypatch.setattr(bot_actions, "send_message", spy_send)

        await bot_actions.edit_message(
            chat_id=7,
            message_id=77,
            message="Caption after trying both",
            image_key="upl_key",
            reply_markup=None
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert any(c[0] == "edit_message_media" for c in bot.calls)
        assert updated.get('args') == ("upl_key", ui_image.show, "fresh_file_id")
        assert spy_send.calls == []


    @pytest.mark.asyncio
    async def test_edit_text_message_not_modified(self, patch_fake_aiogram, replacement_fake_bot, monkeypatch):
        """
        –ï—Å–ª–∏ edit_message_text –±—Ä–æ—Å–∞–µ—Ç TelegramBadRequest('message is not modified') ‚Äî
        —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞: send_message –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.
        """
        from src.bot_actions import actions as bot_actions
        from aiogram import exceptions as aiogram_excs
        not_modified_exc = aiogram_excs.TelegramBadRequest("message is not modified")

        bot = replacement_fake_bot
        bot.edit_text_behavior = not_modified_exc
        spy_send = SpySend()

        monkeypatch.setattr(bot_actions, "send_message", spy_send)

        await bot_actions.edit_message(
            chat_id=1,
            message_id=2,
            message="Same text",
            image_key=None,
            reply_markup=None
        )

        assert any(c[0] == "edit_message_text" for c in bot.calls)
        assert spy_send.calls == []


    @pytest.mark.asyncio
    async def test_edit_text_message_not_found_fallbacks_to_send(self, patch_fake_aiogram, replacement_fake_bot, monkeypatch):
        """
        –ï—Å–ª–∏ edit_message_text –±—Ä–æ—Å–∞–µ—Ç TelegramBadRequest('message not found'),
        —Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ fallback-–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_message.
        """
        from src.bot_actions import actions as bot_actions
        from aiogram import exceptions as aiogram_excs

        not_found_exc = aiogram_excs.TelegramBadRequest("message not found")
        bot = replacement_fake_bot
        bot.edit_text_behavior = not_found_exc

        spy_send = SpySend()

        monkeypatch.setattr(bot_actions, "send_message", spy_send)

        await bot_actions.edit_message(
            chat_id=11,
            message_id=12,
            message="This will fallback",
            image_key=None,
            reply_markup=None
        )

        assert any(c[0] == "edit_message_text" for c in bot.calls)
        assert len(spy_send.calls) == 1
        assert spy_send.calls[0][0] == 11
        assert "This will fallback" in spy_send.calls[0][1]


    @pytest.mark.asyncio
    async def test_local_file_missing_then_fallback_send(
            self, patch_fake_aiogram, replacement_fake_bot, monkeypatch, create_ui_image, tmp_path
    ):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (FileNotFoundError –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ FSInputFile)
        –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç fallback: send_message –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.
        """
        from src.bot_actions import actions as bot_actions
        ui_image, _ = await create_ui_image(key="missing_local", show=True, file_id=None)
        # –¥–µ–ª–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å
        ui_image.file_path = str(tmp_path / "no_such_file.png")

        # –ü–æ–¥–º–µ–Ω–∏–º FSInputFile –≤ –º–æ–¥—É–ª–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—Ä–æ—Å–∞–µ—Ç FileNotFoundError
        def fake_FSInputFile(path):
            raise FileNotFoundError(f"No such file: {path}")

        spy_send = SpySend()

        monkeypatch.setattr(bot_actions, "FSInputFile", fake_FSInputFile)
        monkeypatch.setattr(bot_actions, "send_message", spy_send)

        await bot_actions.edit_message(
            chat_id=900,
            message_id=901,
            message="Trying to upload missing file",
            image_key="missing_local",
            reply_markup=None
        )

        # –¢.–∫. upload –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ–ª–ª–±—ç–∫ –Ω–∞ send_message
        assert len(spy_send.calls) == 1
        assert spy_send.calls[0][0] == 900
        assert "Trying to upload missing file" in spy_send.calls[0][1]
