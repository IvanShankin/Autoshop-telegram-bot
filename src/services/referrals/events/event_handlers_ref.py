from datetime import datetime

from aiogram.exceptions import TelegramForbiddenError
from sqlalchemy import update, select

from src.utils.bot_instance import get_bot
from src.config import DT_FORMAT_FOR_LOGS
from src.services.users.actions import get_user, update_user
from src.services.users.models import UserAuditLogs, WalletTransaction, NotificationSettings
from src.services.database.database import get_db
from src.utils.i18n import get_i18n
from src.services.referrals.actions import get_referral_lvl
from src.services.referrals.models.models_ref import Referrals, IncomeFromReferrals
from src.services.replenishments_event.schemas import ReplenishmentCompleted
from src.utils.core_logger import logger
from src.utils.send_messages import send_log


async def referral_event_handler(event):
    if isinstance(event, ReplenishmentCompleted):
        await handler_new_income_referral(event)

async def handler_new_income_referral(new_replenishment: ReplenishmentCompleted):
    money_credited = False
    last_lvl = 0
    current_lvl = 0
    percent_current_lvl = 0

    try:
        async with get_db() as session_db:
            result = await session_db.execute(select(Referrals).where(Referrals.referral_id == new_replenishment.user_id))
            test_owner = result.scalar_one_or_none()
            if not test_owner:
                return
            else:
                last_lvl = test_owner.level

        owner = await get_user(test_owner.owner_user_id)

        referral_levels = await get_referral_lvl() # —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —É—Ä–æ–≤–Ω—è
        for lvl in referral_levels:
            if new_replenishment.total_sum_replenishment >= lvl.amount_of_achievement: # –µ—Å–ª–∏ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ–ª—å—à–µ –∏–ª–∏
                current_lvl = lvl.level
                percent_current_lvl = lvl.percent

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if current_lvl:
            async with get_db() as session_db:
                await session_db.execute(
                    update(Referrals)
                    .where(Referrals.referral_id == new_replenishment.user_id)
                    .values(level=current_lvl)
                )
                await session_db.commit()

        # —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        income_amount = int(new_replenishment.amount * percent_current_lvl / 100)
        if not income_amount:
            return

        owner.balance = owner.balance + income_amount
        owner.total_profit_from_referrals = owner.total_profit_from_referrals + income_amount

        await update_user(owner)

        # --- –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ ---
        async with get_db() as session_db:
            new_income = IncomeFromReferrals(
                replenishment_id=new_replenishment.replenishment_id,
                owner_user_id=owner.user_id,
                referral_id=new_replenishment.user_id,
                amount=income_amount,
                percentage_of_replenishment=percent_current_lvl,
            )

            new_trans = WalletTransaction(
                user_id=owner.user_id,
                type='referral',
                amount=income_amount,
                balance_before=owner.balance - income_amount,
                balance_after=owner.balance
            )

            new_log = UserAuditLogs(
                user_id=owner.user_id,
                action_type = 'profit from referral'
            )
            session_db.add(new_income)
            session_db.add(new_trans)
            session_db.add(new_log)
            await session_db.commit()

            money_credited = True
            result_db = await session_db.execute(
                select(NotificationSettings)
                .where(NotificationSettings.user_id == owner.user_id)
            )
            notifications = result_db.scalar_one_or_none()
            if notifications and notifications.referral_replenishment:
                await on_referral_income_completed(
                    owner.user_id,
                    owner.language,
                    new_replenishment.amount,
                    last_lvl,
                    current_lvl,
                    percent_current_lvl
                )

    except Exception as e:
        logger.error(f"#–û—à–∏–±–∫–∞_–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞. "
                     f"–§–ª–∞–≥ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {money_credited}. –û—à–∏–±–∫–∞: {str(e)}.")
        await on_referral_income_failed(str(e))


async def on_referral_income_completed(user_id: int, language: str,  amount: int, last_lvl: int, current_lvl: int, percent: int):
    """–û—Ç—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    bot = get_bot()

    try:
        i18n = get_i18n(language, "replenishment_dom")
        if last_lvl == current_lvl:  # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è
            message = i18n.gettext(
                "üí∏ Your referral has replenished the balance. \nüí° Referral level: {level} \nüíµ You have earned {amount}‚ÇΩ ({percent}%)\n\n"
                "‚Ä¢ Funds have been credited to your balance in your personal account."
            ).format(level=current_lvl, amount=amount, percent=percent)
        else:
            message = i18n.gettext(
                "üí∏ Your referral has replenished their balance and increased the level of the referral system.\n"
                "üå† Referral level: {last_lvl} ‚û°Ô∏è {current_lvl}\n"
                "üí∞ You have earned: {amount}‚ÇΩ ({percent}%)\n\n"
                "‚Ä¢ Funds have been credited to your balance in your personal account."
            ).format(last_lvl=last_lvl, current_lvl=current_lvl, amount=amount, percent=percent)

        try:
            await bot.send_message(user_id, message)
        except TelegramForbiddenError:  # –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pass
    except Exception as e:
        logger.error(
            f"#–û—à–∏–±–∫–∞_–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –û—à–∏–±–∫–∞: {str(e)}."
        )

        i18n = get_i18n('ru', "replenishment_dom")
        message_log = i18n.gettext(
            "#Replenishment_error \n\n"
            "An error occurred while sending a message about replenishing funds to the referral owner. \n"
            "Error: {error}. \n\n"
            "Time: {time}"
        ).format(error=str(e), time=datetime.now().strftime(DT_FORMAT_FOR_LOGS))
        await send_log(message_log)

async def on_referral_income_failed(error: str):
    """–û—Ç—Å—ã–ª–∞–µ—Ç –ª–æ–≥ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"""
    i18n = get_i18n('ru', "replenishment_dom")
    message_log = i18n.gettext(
        "#Replenishment_error \n\n"
        "An error occurred while sending a message about replenishing funds to the referral owner. \n"
        "Error: {error}. \n\n"
        "Time: {time}"
    ).format(error=error, time=datetime.now().strftime(DT_FORMAT_FOR_LOGS))

    await send_log(message_log)

